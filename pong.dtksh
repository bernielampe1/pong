#!/usr/dt/bin/dtksh

#####################
# PONG IN DTKSH
#####################

max_x=500
max_y=350
color_bat=White
color_ball=White
color_text=White
color_bg=Black
delay=25
skill=2
quiet=0
factor=1
batwidth=8
title="Pong"
cpu=1

bat1x=10
bat1y=5
bat2x=10
bat2y=5
bat1yy=0
bat2yy=0
score1=0
score2=0
deadball=15
think=10

while (( $# != 0 ))
do
	case "$1" in
		-h|--help)	print -u2 "
USAGE: $0 [-h] [-x pixels] [-y pixels] [-fg color] [-bat color] [-ball color] [-bg color] [-skill num] [-speed num]\n
	
	-h 	help
	-q 	quiet
	-x	width (pixels)
	-y	height (pixels)
	-fs	text color
	-bat	bat color	
	-ball	ball color
	-bg 	background
	-skill	difficulty (1,2 or 3)
	-speed	speed factor
	-2p	2 player game

Player 1 uses \"A\" and \"Z\", player 2 uses \"K\" and \"M\". \"Q\" to quit."
		exit 0
	;;
	-fg)	color_text=$2
		shift
	;;
	-x)	max_x=$2
		if (( max_x<100 )); then
		print -u2 "Error: Width $max_x is too small\n"
		exit 1
		fi
		shift
	;;
	-y)	max_y=$2
		if (( max_y<100 )); then
		print -u2 "Error: Height $max_y is too small\n"
		exit 1
		fi
		shift
	;;
	-bat)	color_bat=$2
		shift
	;;
	-ball)	color_ball=$2
		shift
	;;
	-skill)	skill=$2
		shift
	;;
	-speed)	factor=$2
		shift
	;;
	-bg)	color_bg=$2
		shift
	;;
	-q)	quiet=1
	;;
	-2p)	cpu=0
	;;
	esac
shift
done

function scalables {
	(( score_x = max_x / 2 - 30 ))
	(( batheight = max_y / 4 ))
	((batspeed = factor * max_y/24 ))
	(( bat2x = max_x - bat1x ))
	(( ballsize = max_x / 40 ))
	(( ballhalf = ballsize / 2 ))
	(( ballspeed = factor * max_x / 48 ))
	(( bat1y2 = bat1y + batheight ))
	(( bat2y2 = bat2y + batheight ))
	(( min_xx = factor * max_x / 100 ))
	if (( min_xx == 0 ))
	then
		min_xx=1
	fi
	if (( ballspeed == 0 ))
	then 
		ballspeed=1
	fi
	(( boundry1 =0 ))
	(( boundry2 = bat1x + batwidth ))
	(( boundry3 = bat2x - batwidth ))
	(( boundry4 = max_x ))
	(( boundry5 = max_y - ballsize ))
	(( boundry6 = max_y - batheight ))
	(( boundry7 = bat1x + batwidth + ballsize + ballspeed ))
	(( boundry8 = bat2x - batwidth - ballsize - ballspeed ))
}

scalables
ball1xx=-$ballspeed
ball1yy=$ballspeed
if (( cpu == 1 ))
then 
	bat2yy=$batspeed
else
	bat2yy=0
fi
(( bat1y2 = bat1y + batheight ))
(( bat2y2 = bat2y + batheight ))
(( ball1x = max_x * 2.2 / 3 ))
(( ball1y = max_y * 2.5 / 3 ))

XtInitialize TOP plot Plot $0
XtCreateManagedWidget FORM form XmForm $TOP \
	resizePolicy:RESIZE_ANY \
	dialogTitle:"$title" \
	height:$max_y width:$max_x x:0 y:0 \
	background:$color_bg foreground:$color_bg

XtCreateManagedWidget DRAW1 draw1 XmDrawingArea $FORM \
	topAttachment:ATTACH_FORM bottomAttachment:ATTACH_FORM \
	leftAttachment:ATTACH_FORM rightAttachment:ATTACH_FORM \
	x:0 y:0 background:$color_bg marginHeight:0

XtCreateManagedWidget SCORE1 score1 XmLabel $DRAW1 \
	x:$score_x y:8 foreground:$color_text background:$color_bg \
	labelString:"$score1	:	$score2"

XtDisplay DISPLAY $FORM
XSync $DISPLAY true
XtRealizeWidget $TOP
XtWindow WINDOW1 $DRAW1

function redraw_clear {
	yes=$1
	if (( yes || (bat1y != old_bat1y) ))
	then
		XDrawLine $DISPLAY $WINDOW1 \
			-foreground $color_bg \
			-line_width $batwidth \
			-line_style LineSolid \
			$bat1x $old_bat1y $bat1x $old_bat1y2
	fi
	if (( yes || (bat2y != old_bat2y) )); then
		XDrawLine $DISPLAY $WINDOW1 \
			-foreground $color_bg \
			-line_width $batwidth \
			-line_style LineSolid \
			$bat2x $old_bat2y $bat2x $old_bat2y2
	fi

	XFillArc $DISPLAY $WINDOW1 -foreground $color_bg $old_ball1x $old_ball1y $ballsize $ballsize 0 23040
}

function redraw_solid {
	yes=$1
	
	if (( old_ball1x < boundry7 || old_ball1x > boundry8 )); then
		yes=1
	fi
	if (( yes || (bat1y != old_bat1y) )); then
		XDrawLine $DISPLAY $WINDOW1 \
			-foreground $color_bat \
			-line_width $batwidth \
			-line_style LineSolid \
			$bat1x $bat1y $bat1x $bat1y2
	fi
	if (( yes || (bat2y != old_bat2y) )); then
		XDrawLine $DISPLAY $WINDOW1 \
			-foreground $color_bat \
			-line_width $batwidth \
			-line_style LineSolid \
			$bat2x $bat2y $bat2x $bat2y2
	fi

	if (( deadball <= 0 )); then
		XFillArc $DISPLAY $WINDOW1 \
			-foreground $color_ball \
			$ball1x $ball1y $ballsize $ballsize 0 23040
	fi
	XFlush $DISPLAY
}

function resizewin { 
	redraw_clear 1
	XtGetValues $DRAW1 width:max_x height:max_y
	scalables
	redraw_solid 2
	XtSetValues $SCORE1 x:$score_x y:8
}

function gameinput {

	key=${EH_EVENT.XKEY.KEYCODE}
	if (( key == 38 || key == 11 || key ==84 )); then
		bat1yy=-$batspeed
	elif (( key == 53 ||key == 63 || key == 36 || key == 107 )); then
		bat1yy=$batspeed
	elif (( key == 45 || key== 48 || key== 21 || key == 91 )); then
		bat2yy=-$batspeed
	elif (( key == 59 || key == 50 || key == 23 || key == 113 )); then
		bat2yy=$batspeed
	elif (( key == 54 || key == 24 || key == 27 || key == 61 )); then
		exit 0
	fi
}

function increment {
	old_bat1y=$bat1y
	old_bat1y2=$bat1y2
	old_bat2y=$bat2y
	old_bat2y2=$bat2y2
	old_ball1x=$ball1x
	old_ball1y=$ball1y

	(( bat1y += bat1yy ))
	(( bat2y += bat2yy ))
	(( bat1y2 = bat1y + batheight ))
	(( bat2y2 = bat2y + batheight ))
	if (( deadball > 0 )); then
		(( deadball-- ))
	else
		(( ball1x += ball1xx ))
		(( ball1y += ball1yy ))
	fi
}

function movecpu {
	if (( skill == 1 )); then
		if (( bat2y > boundry6 )); then
			bat2y=$boundry6
			bat2yy=-$batspeed
		fi
		if (( bat2y < 0 )); then
			bat2y=0
			bat2yy=$batspeed
			(( bat2y2 = bat2y + batheight ))
		fi

	elif (( skill == 2 )); then
		(( think-- ))
		if (( think <= 0 )); then
			if (( ball1yy < 0 )); then
				bat2yy=-$batspeed
			else
				bat2yy=$batspeed
			fi 
			think=10
		fi
		if (( bat2y > boundry6 )) ;then
			bat2y=$boundry6; bat2yy=0
		fi 
		if (( bat2y < 0 )); then
			bat2y=0; bat2yy=0
			(( bat2y2 = bat2y + batheight ))
		fi

	elif (( skill == 3 )); then
		(( think-- ))
		if (( think <= 0 && ball1x > boundry9 && ball1xx > 0 )); then
			if (( (ball1y - bat2y - (batheight/2)) < 0 )); then
				bat2yy=-$batspeed
			else
				bat2yy=$batspeed
			fi
			(( think = ballspeed*15/ball1xx * (max_x-ball1x)/max_x ))
			if (( think < 0 )); then (( think = - think )); fi
			(( think += RANDOM %2 ))
		fi
		if (( bat2y > boundry6 )); then
			bat2y=$boundry6; ba2yy=0
		fi
		if (( bat2y < 0 )); then
			bat2y=0;bat2yy=0
			(( bat2y2 = bat2y + batheight ))
		fi

	elif (( skill == 0 )); then
		(( think-- ))
		if (( think <= 0 )); then
			if (( (RANDOM % 2) == 0 )); then
				bat2yy=-$batspeed
			else
				bat2yy=$batspeed
			fi
			(( think = RANDOM % 15 ))
		fi
		if (( bat2y > boundry6 )); then
			bat2y=$boundry6; bat2yy=0
		fi
		if (( bat2y < 0 )); then
			bat2y=0; bat2yy=0
			(( bat2y2 = bat2y + batheight ))
		fi

	fi
}

function checkbounds {
	if (( bat1y > boundry6 )); then
		bat1y=$boundry6
		bat1yy=0
	fi
	if (( bat1y < 0 )); then
		bat1y=0; bat1yy=0
		(( bat1y2 = bat1y + batheight )) 
	fi
	if (( cpu == 0 )); then
		if (( bat2y > boundry6 )); then
			bat2y=$boundry6
			bat2yy=0
		fi
		if (( bat2y < 0 )); then
			bat2y=0; bat2yy=0
			(( bat2y2 = bat2y + batheight ))
		fi
	fi
	if (( ball1x < boundry1 )); then
		(( score2++ ))
		XtSetValues $SCORE1 labelString:"$score1	:	$score2"
		(( ball1x = max_x * 1 / 2 ))
		(( ball1y = max_y * 1 / 2 ))
		ball1xx=-$ballspeed
		ball1yy=-$ballspeed
		deadball=30
	fi
	if (( ball1x > boundry4 )); then
		(( score1++ ))
		XtSetValues $SCORE1 labelString:"$score1	:	$score2"
		(( ball1x = max_x * 1 / 2 ))
		(( ball1y = max_y * 1 / 2 ))
		ball1xx=-$ballspeed
		ball1yy=-$ballspeed
		deadball=30
	fi
	if (( ball1y < 0 )); then
		ball1y=0
		(( ball1yy = - ball1yy ))
	fi
	if (( ball1y > boundry5 )); then
		ball1y=$boundry5
		(( ball1yy = - ball1yy ))
	fi
}

function checkbounce {
	if (( (ball1x < boundry2) && (ball1xx < 0) )); then
		if (( (ball1y >= bat1y) && (ball1y <= bat1y2) ))
		then	
			if (( quiet == 0 )); then
				print -n "\a"
			fi
			ball1x=$boundry2
			if (( ball1y < bat1y + batheight / 4 ));then
				(( nudge = (RANDOM % 3) - 1 ))
				if (( ball1yy > 0 )); then
					(( ball1xx = - ball1xx * 5/4 ))
				else
					(( ball1xx= - ball1xx * 3/4 ))
				fi
				(( ball1yy -= ballspeed * 1/4 + nudge ))
			elif (( ball1y > bat1y + (batheight * 3 / 4) )); then
				(( nudge = (RANDOM % 3) - 1 ))
				if (( ball1yy < 0 )); then
					(( ball1xx = - ball1xx * 5/4 ))
				else
					(( ball1xx = - ball1xx * 3/4 ))
				fi
				(( ball1yy += ballspeed * 1/4 + nudge ))
			else
				(( ball1xx = - ball1xx ))
			fi
			if (( ball1xx < min_xx )); then ball1xx=$min_xx; fi
		fi
	fi
	if (( ball1x > boundry3 )); then
		if (( (ball1y >= bat2y) && (ball1y <= bat2y2) ))
		then
			if (( quiet == 0 )); then
				print -n "\a"
			fi
		ball1x=$boundry3
		if (( ball1y < bat2y + batheight / 4 )); then
			(( nudge = (RANDOM %3) - 1 ))
			if (( ball1yy > 0 )); then
				(( ball1xx = - ball1xx * 5/4 ))
			else
				(( ball1xx = - ball1xx * 3/4 ))
			fi
		elif (( ball1y > bat2y + (batheight * 3 / 4) )); then
			(( nudge = (RANDOM %3) - 1 ))
			if (( ball1yy < 0 )); then
				(( ball1xx = - ball1xx * 5/4 ))
			else
				(( ball1xx = - ball1xx * 3/4 ))
			fi
			(( ball1yy += ballspeed * 1/4 + nudge ))
		else
			(( ball1xx = - ball1xx ))
		fi
		if (( ball1xx > - min_xx )); then ball1xx=-$min_xx;fi
		fi
	fi
}

function update {
	increment
	if (( cpu == 1 )); then movecpu; fi 
	checkbounce
	checkbounds

	redraw_clear 0 
	redraw_solid 0
	
	XtAddTimeOut ID $delay update
}

XtAddEventHandler $DRAW1 "KeyPressMask" false gameinput
XtAddCallback $DRAW1 exposeCallback "redraw_solid 1"
XtAddCallback $DRAW1 resizeCallback resizewin
XtAddTimeOut ID $delay update
XtMainLoop
